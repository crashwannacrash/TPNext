IUT du Limousin
Département Métiers du Multimédia et de l'Internet
BUT 3
Evaluation Next.js


Sous chacune des questions suivantes, vous prendrez soin de décrire de manière **très** synthétique ce que vous avez
ajouté et/ou modifié pour répondre à la question.


1. Ajouter une route /dashboard/credits
   Sur la page correspondante, la sidenav est conservée et vous afficherez juste sur la partie droite le messsage : 
   "Cet examen est l'oeuvre de John Doe" en remplaçant John Doe par vos prénom et nom ! Vous incluerez également
   une image en guise d'avatar. Cette image, outre le fait d'être respectable, doit être hébergée avec votre application (pas de référence externe)

J'ai ajouté un sous dossier credits dans /app/dashboard pour avoir la nouvelle route. Puis j'ai fais un export default dans le page.tsx pour afficher le contenu demandé

2. Modifier la barre latérale de navigation pour ajouter un menu 'Crédits' en plus de 'Home', 'Invoices' et 'Customers'.
   Ce nouveau menu renverra bien entendu vers /dashboard/credits 

j'ai modifié le fichier na-links.tsx pour rajouter la page credits dans la définition des liens rendu dans la boucle.

3. /dashboard
   Ajouter une "carte" qui indique le plus gros montant de toutes les factures déjà payées.
   Note : le composant Card a une prop 'type' pour laquelle vous utiliserez une des valeurs déjà utilisée pour les autres cartes.
   Note 2 : ce n'est pas grave si l'ajout de la carte "désorganise" un peu l'interface. Et on ne vous demande pas de modifier le cardsSkeleton en conséquence.

J'ai ajouté une requete sql dans le fetchCardData pour récupérer directement le montant le plus gros déja payé, puis je l'ai return avec les données de la carte, importé dans le page.tsx du dashboard et appliqué dans une card.

4. /dashboard/customers
   Afficher sur cette page la liste des clients en présentant dans une table leur identifiant, son image de profil, leur prénom et nom, leur adresse email.
   On ne vous demande pas un affichage paginé. Vous pouvez tout afficher. Par contre merci d'utiliser <Suspense>.
   Note : basez-vous sur /dashboard/invoices. Vous pouvez reprendre des composants déjà présents ou si besoin en dupliquer/modifier 
   pour l'adapater aux données.

J'ai modifier dans data.ts la fonction permettant de recupérer tous les custommers pour pouvoir récupérer l'email ainsi que la profile pic avec. Une fois cela fait j'ai créé un tableau et j'ai mapé les propriété aux colonnes afin de pouvoir les afficher a l'aide d'une boucle. J'ai fetch les données des customers en haut du fichier également

5. /dashboard/customers
   Modifier votre affichage pour faire apparaître en plus pour chaque client le nombre de factures qu'il a déjà payé et le nombre
   de facture qu'il lui reste encore à payer.

J'ai créé dans data.ts fetchAllInvoices en précisant ceque je voulait retourner comme info pour les invoices, j'ai fais une liaison avec la table customers pour récupérer l'id correspondant pour chaque customer. Par la suite j'ai fais une boucle double boucle for dans l'affichage pour déterminer les invoices de chaque customer ainsi que son status pour afficher les nombres équivalents.

6. /dashboard/customers
   Ajouter un bouton qui permet de saisir et enregistrer un nouveau client. Là encore, basez-vous sur /dashboard/invoices.
   Note : pour vous simplifier un peu les choses, on ne vous demande pas de gérer l'upload d'une image de profil. Vous pouvez
   directement saisir son path. Et ne perdez pas de temps à chercher des images... dupliquez et renommez celles déjà présentes.

J'ai créé la route create et page.tsx à l'intérieur. J'ai ensuite créé a partir du form de la page invoices les fichiers create-form et breadcrumbs que j'ai adapté à la création de customers. J'ai ensuite créé l'action createCustomer ainsi que son schéma dans actions.ts
